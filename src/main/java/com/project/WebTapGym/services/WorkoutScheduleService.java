package com.project.WebTapGym.services;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.project.WebTapGym.dtos.WorkoutScheduleDTO;
import com.project.WebTapGym.models.Exercise;
import com.project.WebTapGym.models.User;
import com.project.WebTapGym.models.WorkoutSchedule;
import com.project.WebTapGym.repositories.ExerciseRepository;
import com.project.WebTapGym.repositories.UserRepository;
import com.project.WebTapGym.repositories.WorkoutScheduleRepository;
import com.project.WebTapGym.responses.WorkoutScheduleChatResponse;
import com.project.WebTapGym.responses.WorkoutScheduleResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

@Service
@RequiredArgsConstructor
public class WorkoutScheduleService implements IWorkoutScheduleService
{
    private final ChatGPTService chatGPTService;
    private final WorkoutScheduleRepository workoutScheduleRepository;
    private final UserRepository userRepository;
    private final ExerciseRepository  exerciseRepository;
    private final EmailService emailService;

    @Override
    @Transactional
    public WorkoutSchedule createWorkoutSchedule(WorkoutScheduleDTO workoutScheduleDTO) {
        String phone = SecurityContextHolder.getContext().getAuthentication().getName(); // L·∫•y phone t·ª´ SecurityContext

        User user = userRepository.findByPhone(phone)
                .orElseThrow(() -> new RuntimeException("User not found"));


        List<Exercise> exercises = new ArrayList<>();
        if (workoutScheduleDTO.getExerciseIds() != null && !workoutScheduleDTO.getExerciseIds().isEmpty()) {
            for (Long exerciseId : workoutScheduleDTO.getExerciseIds()) {
                Exercise exercise = exerciseRepository.findById(exerciseId)
                        .orElseThrow(() -> new RuntimeException("Exercise not found with ID: " + exerciseId));
                exercises.add(exercise);
            }
        }


        WorkoutSchedule workoutSchedule = WorkoutSchedule.builder()
                .userId(user)
                .dayOfWeek(workoutScheduleDTO.getDayOfWeek())
                .timeSlot(workoutScheduleDTO.getTimeSlot())
                .workoutType(workoutScheduleDTO.getWorkoutType())
                .duration(workoutScheduleDTO.getDuration())
                .exercises(exercises)
                .build();
        return workoutScheduleRepository.save(workoutSchedule);
    }

    @Override
    public Page<WorkoutScheduleResponse> getWorkoutSchedulesByUserId(Long userId, PageRequest pageRequest) {
        return workoutScheduleRepository
                .findByUserId_Id(userId, pageRequest)
                .map(WorkoutScheduleResponse::fromWorkoutSchedule);
    }

    @Override
    public void deleteWorkoutSchedule(Long scheduleId) {
        WorkoutSchedule workoutSchedule = workoutScheduleRepository.findById(scheduleId)
                .orElseThrow(() -> new RuntimeException("Workout schedule not found"));
        workoutScheduleRepository.delete(workoutSchedule);
    }

    @Override
    public WorkoutScheduleChatResponse suggestWorkoutSchedule(Long userId, String goalInput) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        String goal = (goalInput != null && !goalInput.isBlank()) ? goalInput : user.getGoal();

        if (goalInput != null && !goalInput.isBlank()) {
            user.setGoal(goalInput);
            userRepository.save(user);
        }

        String message = "B·∫°n h√£y ƒë√≥ng vai hu·∫•n luy·ªán vi√™n c√° nh√¢n v√† g·ª£i √Ω m·ªôt l·ªãch t·∫≠p luy·ªán k√©o d√†i 1 tu·∫ßn cho ng∆∞·ªùi c√≥ m·ª•c ti√™u: " + goal +
                ". M·ªói ng√†y n√™n g·ªìm: th·ª© trong tu·∫ßn, th·ªùi gian t·∫≠p, lo·∫°i h√¨nh t·∫≠p, th·ªùi l∆∞·ª£ng. H√£y tr√¨nh b√†y g·ª£i √Ω m·ªôt c√°ch d·ªÖ hi·ªÉu nh∆∞ ƒëang tr√≤ chuy·ªán v·ªõi ng∆∞·ªùi t·∫≠p, kh√¥ng c·∫ßn JSON, kh√¥ng c·∫ßn ƒë√°nh d·∫•u markdown.";

        String aiResponse = chatGPTService.sendMessageToChatbot(message);

        return new WorkoutScheduleChatResponse(aiResponse.trim());
    }

    @Scheduled(cron = "0 0 7 * * ?") // M·ªói ng√†y l√∫c 07:00 s√°ng
    public void sendDailyWorkoutReminders() {
        DayOfWeek todayEnum = LocalDate.now().getDayOfWeek();

        // L·∫•y c·∫£ t√™n ti·∫øng Vi·ªát v√† ti·∫øng Anh
        String viName = todayEnum.getDisplayName(TextStyle.FULL, new Locale("vi", "VN"));   // Th·ª© Hai
        String enName = todayEnum.getDisplayName(TextStyle.FULL, Locale.ENGLISH);           // Monday

        // T√¨m c√°c l·ªãch t·∫≠p cho h√¥m nay (ch·∫•p nh·∫≠n c·∫£ ti·∫øng Vi·ªát v√† Anh)
        List<WorkoutSchedule> todaysSchedules = workoutScheduleRepository.findSchedulesForToday(String.valueOf(List.of(viName, enName)));

        for (WorkoutSchedule schedule : todaysSchedules) {
            String email = schedule.getUserId().getEmail();
            String content = String.format("""
                    Ch√†o b·∫°n,

                    H√¥m nay b·∫°n c√≥ l·ªãch t·∫≠p nh∆∞ sau:
                    ‚Ä¢ Lo·∫°i h√¨nh: %s
                    ‚Ä¢ Th·ªùi gian: %s
                    ‚Ä¢ Th·ªùi l∆∞·ª£ng: %d ph√∫t
                    
                    Ch√∫c b·∫°n t·∫≠p luy·ªán hi·ªáu qu·∫£!
                    """, schedule.getWorkoutType(), schedule.getTimeSlot(), schedule.getDuration());

            emailService.sendReminderEmail(email, "üìÖ Nh·∫Øc nh·ªü l·ªãch t·∫≠p h√¥m nay", content);
        }
    }
}
